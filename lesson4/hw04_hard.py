# -*- coding: utf-8 -*-

__author__ = 'Алексей Коваленко'


import functools

# Задание-1:
# Матрицы в питоне реализуются в виде вложенных списков:
# Пример. Дано:
matrix = [[1, 0, 8],
          [3, 4, 1],
          [0, 4, 2]]
          
# Выполнить поворот (транспонирование) матрицы
# Пример. Результат:
# matrix_rotate = [[1, 3, 0],
#                  [0, 4, 4],
#                  [8, 1, 2]]

# Суть сложности hard: Решите задачу в одну строку

matrix_rotate = [[1, 0, 8],
                  [3, 4, 1],
                  [0, 4, 2]]

print('*** Задание 1 ***')

matrix_rotate = list(map(list, zip(*matrix_rotate)))

for i, line in enumerate(matrix_rotate):
    print(line)

# Задание-2:
# Найдите наибольшее произведение пяти последовательных цифр в 1000-значном числе.
# Выведите произведение и индекс смещения первого числа последовательных 5-ти цифр.
# Пример 1000-значного числа:
number = """
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450"""

print('\n*** Задание 2 ***')

stack5 = []
number = list(number.replace('\n',''))
max_ = 0
index = 0
for i in range(len(number)):
    stack5.append(int(number[i]))
    if len(stack5) > 5:
        stack5.pop(0)
    a = functools.reduce(lambda res, x: res * x, stack5)
    if a > max_:
        max_ = a
        index = i - 4

print('Самое большое произведение {} - это последовательность {}, которая начинается с позиции {}'.format(max_, number[index: index+5], index))

# Задание-3 (Ферзи):
# Известно, что на доске 8×8 можно расставить 8 ферзей так, чтобы они не били
# друг друга. Вам дана расстановка 8 ферзей на доске.
# Определите, есть ли среди них пара бьющих друг друга.
# Программа получает на вход восемь пар чисел,
# каждое число от 1 до 8 — координаты 8 ферзей.
# Если ферзи не бьют друг друга, выведите слово NO, иначе выведите YES.

print('\n*** Задание 3 ***')

def queen_sol_generator():  # функция генератор - надо же как то найти верные варианты

    solutions = []

    def rc_queens(n_col, width, sol):
        if len(sol) == width:
            a = sol
            b = [i for i in range(8)]
            solutions.append(list(zip(b, a)))
        else:
            for n_row in range(width):
                if (safe_queen(n_row, n_col, sol)):
                    rc_queens(n_col+1, width, sol+[n_row])

    def safe_queen(new_row, new_col, sol):
        for col in range(len(sol)):
            if (sol[col] == new_row or
                abs(col - new_col) == abs(sol[col] - new_row)):
                    return 0
        return 1

    if __name__ == "__main__":
        for n in range(8):
            rc_queens(1, 8, [n])

    return solutions

"""
нижеприведенный код является решениемм ДЗ
сверху код, который взят для удобства поска возможных комбинаций ферзей
"""


def queen_test(combination):
    a = []
    b = []
    for i in combination:
        a.append(i[0])
        b.append(i[1])
    a1 = set(a)
    b1 = set(b)
    if len(a1) < 8 or len(b1) < 8:
        return False

    for i in range(len(combination)):
        for j in range(len(combination)):
            if j != j and abs(combination[i][0] - combination[j][0]) == abs(combination[i][1] - combination[j][1]):
                return False
    return True




combinations = queen_sol_generator()
examples = [
    combinations[4],
    [(0, 0), (4, 2), (7, 2), (5, 3), (2, 4), (6, 5), (1, 6), (3, 7)], # бьются
    combinations[9],
    [(0, 0), (4, 4), (7, 2), (5, 3), (2, 4), (6, 5), (1, 6), (3, 7)],  # бьются
    combinations[15]
]

for i in examples:
    print('*** Комбинация {} - {} ***'.format(i, 'YES' if queen_test(i) else 'NO'))